

Using Linux few years and enjoy a lot these are some of my notes from various books and or articles - websites on mainly hardening - securing and hopefully it saves others time from having to search as much ~



## Installation 

use lvm with seperate / /boot /home /var /tmp /usr and encrypted with luks


can also do /var/log and /var/tmp /opt if you like 


a tip I learned for efficiency after install was have one big home by creating soft links from /opt and /usr/local to home like so:

sudo ln -s /opt /home/opt

sudo ln -s /usr/local /home/local

add nosuid to all partitions in /etc/fstab besides /usr

add nodev to all besides / root 

add noexec,nodev,nosuid to /tmp /var/tmp /dev/shm (some do /home /boot) then:

sudo chmod 1777 /tmp /var/tmp

some set /usr to "ro" read only I like to but it can be a pain because of updates need to write to /usr and any software installed ... however it's more secure to do so up to you ...

set /boot to ro (read only) 

#This is what works well just when you login run: sudo mount -o remount,ro,noatime,nodev /usr
and before you install software or update just run: sudo mount -o remount,rw,noatime,nodev /usr Once installed switch it back to read only "ro": sudo mount -o remount,ro,noatime,nodev /usr


##work for gov and or mil and or have sensitive data that one could try forcing you to get to then install cryptsetup-nuke-password:

(This provides a relatively stealth way to make your data unreadable in case of emergency)

sudo apt install cryptsetup-nuke-password 

To use type in terminal: dpkg-reconfigure cryptsetup-nuke-password


Now make up a password and make sure it's different then your usual one


This will Erase the LUKS keys with a special password (that you make up) at the default unlock prompt if you fear seizure of your data this way the data can never be decrypted 


Don't test it out :) 

#If /usr is mounted ro "read only" then package manager can't install ~ update software unless you remove ro and reboot or add the following to the apt.conf:

cd /etc/apt/apt.conf.d/

sudo nano 70debconf

copy paste:

DPkg
{
Pre-Invoke { "mount /usr -o remount,rw" };
Post-Invoke { "mount /usr -o remount,ro" };
};

#little quirky best do as mentioned above manually: sudo mount -o remount,ro,noatime,nodev /usr
-------------------------------------------------------------------------------------------------------------------------
## Partition Mount Example:


sudoedit /etc/fstab

#Start

# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/dev/mapper/tuta--vg-root /               ext4    noatime,nosuid,errors=remount-ro 0       1
# /boot was on /dev/nvme0n1p2 during installation
UUID=31fc417f-98e9-4dca-9328-281e7b9b2b1a /boot           ext2    ro,noatime,nodev,nosuid,noexec 0       2
# /boot/efi was on /dev/nvme0n1p1 during installation
UUID=AB9C-A988  /boot/efi       vfat    umask=0077      0       1
/dev/mapper/tuta--vg-home /home           ext4    rw,noatime,nodev,nosuid	0       2
/dev/mapper/tuta--vg-tmp /tmp            ext4    rw,noatime,nodev,nosuid,noexec	0       2
/dev/mapper/tuta--vg-user /usr            ext4    ro,noatime,nodev   0       2
/dev/mapper/tuta--vg-var /var            ext4    noatime,nodev,nosuid 0       2
/dev/mapper/tuta--vg-logs /var/log        ext4    rw,noatime,nodev,nosuid,noexec 0       2
/dev/mapper/tuta--vg-vartmp /var/tmp        ext4    rw,noatime,nodev,nosuid,noexec	0       2
/dev/mapper/tuta--vg-swap_1 none            swap    sw              0       0

udev /dev devtmpfs rw,nosuid,noexec,noatime 0 0
devpts /dev/pts devpts rw,newinstance,ptmxmode=0666 0 0
tmpfs /dev/shm tmpfs rw,nodev,nosuid,noexec 0 0
tmpfs /home/stv/.cache tmpfs rw,size=400M,noexec,noatime,nodev,uid=stv,gid=stv,mode=700 0 0

#End
------------------------------------------------------------------------------------------------------------------------
## Adding users and or groups (New)

sudo useradd john_doe -m -s /bin/bash -g sudo -G adm,systemd-journal -c 'Johnny Does'

#m to make /home ---- s to set bash ----- g to add to primary group-----G add to secondary groups ----- c for comments like real name or personal info and use quotes if there are any spaces whitespace between words or name single quotes or double doesn't matter...

#lastly assign a password:

sudo passwd john_doe


#useradd does not make a home by default but adduser does :) adduser is a Perl wrapper for useradd


#(Existing) Already have account and want to add it to sudo and or admin:

sudo adduser "$USER" adm

sudo adduser "$USER" systemd-journal

sudo adduser "$USER" sudo

sudo usermod johnDoe -G sudo -a   <------------For existing user

sudo useradd johnDoe -G sudo   <----------At creation time


sudo find / -group johnDoe -exec chgrp newGroup {} \;   (if user changes group then find all their files and rename to the new group)

## You have normal account w/o sudo and would like to upgrade type in terminal:

su 

sudo usermod -a -G sudo,adm yourUserName  <=========adds you to sudo group & admin

sudo usermod -a -g adm yourUserName   <========adds you to admin group

# add yourself to sudoers file type:  sudo visudo 

(underneath root in User privilege specification) put your userName and then ALL=(ALL:ALL) ALL just like root above then


 close ctrl x then y last press Enter 

Example:

root            ALL=(ALL:ALL) ALL
yourUserName    ALL=(ALL:ALL) ALL    <===================== like this 
----------------------------------------------------------------------------------------------------------------------------
## install firewall then add rules last activate:

sudo apt install ufw 

sudo ufw default deny (blocks in) allows out 

(I like block out also)

sudo ufw default deny outgoing

now lets add rules for out-

sudo ufw allow out 443/tcp (https)

sudo ufw allow out 80/tcp  (http)

sudo ufw allow out 53 	(dns)

sudo ufw allow out 123 (time)

sudo ufw allow out 67	(dhcp)

sudo ufw allow out 25/tcp (email smtp) 

now lets enable : sudo ufw enable 

sudo systemctl enable --now ufw


lastly go to the folder /etc/ufw and find "before rules" open then mark out icmp and multicast upnp and save 

check your rules : sudo ufw staus verbose 

or : sudo ufw status numbered 

to delete sudo ufw delete (numberGoesHere)

-------------------------------------------------------------------------------------------------------------------------
## install a https dns proxy 

sudo apt install dnss 

(it starts auto just reboot it uses Googles dns to use Cloudflare read the read me "README.md
" in /usr/share/doc/dnss there are the changes you'd need to copy paste into terminal) 


or stick with stock dns and use cloudflare:

## cloudflare dns set

sudo echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf

can also be typed : sudo echo 'nameserver 1.1.1.1' >> /etc/resolv.conf 

(I like 2nd way :) ) 

-------------------------------------------------------------------------------------------------------------------------
## set timesyncd to use cloudflare & apple 

echo "NTP=time.cloudflare.com" | sudo tee -a /etc/systemd/timesyncd.conf

echo "FallbackNTP=time.apple.com" | sudo tee -a /etc/systemd/timesyncd.conf


or install "ntpsec" package
--------------------------------------------------------------------------------------------------------------------
## Deny all in /etc/hosts.deny

sudoedit /etc/hosts.deny 

#At bottom remove # beside ALL:PARANOID 

#then save and close 
--------------------------------------------------------------------------------------------------------------------
## See what programs are listening waiting for a connection;

netstat -tanp | grep LISTEN


## disable cups

sudo systemctl disable cups.socket cups.path cups.service
sudo systemctl kill --signal=SIGKILL cups.service
sudo systemctl stop cups.socket cups.path

sudo systemctl disable cups-browsed
sudo systemctl stop cups-browsed



## disable avahi

sudo systemctl disable avahi-daemon.socket avahi-daemon.service
sudo systemctl stop avahi-daemon.socket avahi-daemon.service



## disable error reports:
sudo systemctl stop apport.service
sudo systemctl disable apport.service
sudo systemctl mask apport.service

sudo systemctl stop whoopsie.service
sudo systemctl disable whoopsie.service
sudo systemctl mask whoopsie.servic



## disable bluetooth if not used 

sudo systemctl disable bluetooth.service

sudo systemctl disable bluez



## disable speech-dispatcher 

sudo systemctl disable speech-dispatcher



## disable wpa if not needed 

sudo systemctl disable wpa_supplicant



## disable unattended-upgrades 

sudo systemctl disable unattended-upgrades


## Remove packages: 

sudo apt purge popularity-contest* whoopsie*

-------------------------------------------------------------------------------------------------------------------------
## Install firejail and apparmor   https://pvera.net/posts/apparmor-firejail-sandboxing/

sudo apt update
sudo apt install firejail firejail-profiles

sudo apt install apparmor apparmor-notify apparmor-profiles apparmor-utils apparmor-profiles-extra

sudo firecfg (creates softlinks to all programs that firejail has a profile to so that when clicked their sandboxed profile loads, however I have some issues with some software and prefer selecting just a few like browser hexchat evince ...)


#deny a app internet access just edit icon and add this to beginning of its command: firejail --protocol=unix

Example: $firejail --protocol=unix vlc

 
systemctl enable --now apparmor

systemctl status apparmor

sudo aa-enforce /etc/apparmor.d/*

sudo aa-enforce firejail-default 

sudo apparmor_parser -r /etc/apparmor.d/firejail-default


#start inotify 

sudo /usr/bin/aa-notify -p -w 10

check messages of aa-notify: $sudo aa-logprof


#add to grub:

sudo nano /etc/default/grub     "splash apparmor=1 lockdown=confidentiality lsm=lockdown,yama,apparmor"

#status of apparmor shows enforced and more ...

sudo aa-status

ps auxZ | grep -v '^unconfined'
--------------------------------------------------------------------------------------------------------------------
## logs:

sudo cat /var/log/kern.log | grep DENIED

logwatch –range All –archives –detail Med | more

sudo logwatch | less

logwatch –mailto [email protected] –range All 


sudo find /var/log/ -type f \( -name “*.log” \) -exec tail -f “$file” {} + | more

--------------------------------------------------------------------------------------------------------------------
## secure X11

sudoedit /etc/X11/Xwrapper.config  

then add this:  needs_root_rights = no
--------------------------------------------------------------------------------------------------------------------
## Tmp mount in  RAM:

sudo cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/

sudo systemctl enable tmp.mount

#reboot 

systemctl status tmp.mount
--------------------------------------------------------------------------------------------------------------------
## Secure /tmp and /var/tmp (above is easiest-quickest unless you prefer creating a new /tmp)

Temporary storage directories such as /tmp, /var/tmp and /dev/shm allow a hacker to have a place to do naughty things :)


#Securing /tmp folder

#Create a 1 GB or larger if you like /tmp partition:

sudo dd if=/dev/zero of=/usr/tmpDSK bs=1024 count=1024000


#Create backup of current /tmp folder:

sudo cp -Rpf /tmp /tmpbackup


#Mount new /tmp partition and set permissions:

sudo mount -t tmpfs -o loop,noexec,nosuid,rw /usr/tmpDSK /tmp
sudo chmod 1777 /tmp


#Copy data from backup folder then remove backup folder:

sudo cp -Rpf /tmpbackup/* /tmp/
sudo rm -rf /tmpbackup/*


#Add /tmp to the fstab

/usr/tmpDSK /tmp tmpfs loop,nosuid,noexec,rw 0 0


#Finally mount it or reboot

sudo mount -o remount /tmp


## Secure /var/tmp
Securing the /var/tmp because some software use this folder as a temporary folder. Any files and folders within this directory needs to be secured. We will use the /tmp folder we just created by creating a symbolic link (soft-link)

sudo mv /var/tmp /var/tmpold
sudo ln -s /tmp /var/tmp  <====================if you have a tmp already at least link with var/tmp 
sudo cp -prf /var/tmpold/* /tmp/
sudo rm -rf /var/tmpold/

Then reboot
 

--------------------------------------------------------------------------------------------------------------------
## Secure X11 or use Wayland:

sudoedit /etc/X11/Xwrapper.config

and paste this: 

needs_root_rights = no
 
--------------------------------------------------------------------------------------------------------------------
## Secure Shared Memory

sudoedit /etc/fstab

tmpfs     /dev/shm     tmpfs	defaults,noexec,nosuid	0	0

tmpfs     /run/shm    tmpfs	defaults,noexec,nosuid	0	0

--------------------------------------------------------------------------------------------------------------------

This command will allow you to find which files and folders that can be secured:

sudo find / -perm -2 ! -type l -ls


--------------------------------------------------------------------------------------------------------------------
## Disable IRQ Balance, edit /etc/default/irqbalance:

sudo vi /etc/default/irqbalance
And Change the ENABLED value to 0:

ENABLED=0

--------------------------------------------------------------------------------------------------------------------
## Improve performance
Swappiness in the file should be set to 0 or 1 Skipping this step may cause both poor performance, whereas setting it to 0 will cause swap to act as an emergency buffer, preventing out-of-memory crashes. You can do this with the following commands:

echo 0 | sudo tee /proc/sys/vm/swappiness
echo vm.swappiness = 0 | sudo tee -a /etc/sysctl.conf
--------------------------------------------------------------------------------------------------------------------
## Secure SWAP
To prevent the file from being world-readable, you should set up the correct permissions on the swap file:

sudo chown root:root /swapfile
sudo chmod 0600 /swapfile

Reboot
--------------------------------------------------------------------------------------------------------------------
noexec – Prevents execution of binaries on mounted file systems. This prevents remote users from executing unwanted binaries on your system.

nosuid – Disables set-user-identifier or set-group-identifier bits. This prevents remote users from gaining higher privileges by running a setuid program.

nodev – Prevents character and block special devices from being defined, or if they exist, from being used as character and block special devices. This prevents remote users from getting out of chrooted server jails.
--------------------------------------------------------------------------------------------------------------------
## Disable login of few accounts that do not need to have login:

sudo touch nologin.sh

sudo nano nologin.sh

#copy & paste below text then close save


!/bin/bash 
for user in `awk -F: '($3 < 500) {print $1 }' /etc/passwd`; do
if [ $user != "root" ] 
then 
/usr/sbin/usermod -L $user 
if [ $user != "sync" ] && [ $user != "shutdown" ] && [ $user != "halt" ] 
then /usr/sbin/usermod -s /sbin/nologin $user 
fi 
fi 
done

#make executable: sudo chmod +x nologin.sh

#to run just type:

sudo ./nologin.sh
--------------------------------------------------------------------------------------------------------------------
## Block all wireless devices (bluetooth wifi) with Rfkill at boot ~


sudo touch /opt/rfkill.sh && sudoedit /opt/rfkill.sh

Once it’s opened copy and paste:

#!/bin/sh

sleep 20

rfkill block all

exit 0

Then close using Ctrl+x Press Y then Press Enter

Lets make it executable: chmod +x /opt/clean.sh

Now we’ll create a Service that will execute it as root:

sudo touch /etc/systemd/system/rfkill.service

Now lets edit the Service:

sudoedit /etc/systemd/system/clean.service

Copy & Paste:

[Unit]

Description=Rfkill Service

[Service]

ExecStart=/opt/rfkill.sh
Type=oneshot

[Install]

WantedBy=multi-user.target


Close it with Ctrl+x Press Y then Press Enter then type:

sudo systemctl enable rfkill

That’s all! Just reboot and check it ran by typing into Terminal: systemctl status rfkill 
--------------------------------------------------------------------------------------------------------------------
## Change mac address at every boot service 

sudo apt install macchanger 

sudo touch /etc/systemd/system/mac.service 

sudoedit /etc/systemd/system/mac.service

#Now copy & paste ~ 

Unit]
Description=macchanger on eth0
Wants=network-pre.target
Before=network-pre.target
BindsTo=sys-subsystem-net-devices-eth0.device
After=sys-subsystem-net-devices-eth0.device

[Service]
ExecStart=/usr/bin/macchanger -e eth0
Type=oneshot

[Install]
WantedBy=multi-user.target


#press "Ctrl x" to close 

#click "Y" and then press Enter to save

Replace eth0 with your network interface. You can find the mac address with "ip a" command 

Macchanger prompts upon install to automatically change Mac (select No) but it's only when you disable and enable network and not at boot so, this way is more convinient 
--------------------------------------------------------------------------------------------------------------------
## sudoedit /etc/default/grub :

GRUB_CMDLINE_LINUX_DEFAULT="splash apparmor=1 lockdown=confidentiality lsm=lockdown,yama,apparmor modules.sig_enforce=1 slub_debug=F page_alloc.shuffle=1 init_on_alloc=1 init_on_free=1 slab_nomerge audit=1 amd_iommu=on iommu=pt"
--------------------------------------------------------------------------------------------------------------------
## Set Kernel and Network settings using Sysctl audit with lynis or yasat if yasat: sudo yasat -p network.test and if using lynis: sudo lynis audit system

## sudoedit /etc/sysctl.conf :


dev.tty.ldisc_autoload=0

fs.protected_symlinks=1
fs.protected_hardlinks=1
fs.protected_fifos=2
fs.protected_regular=2
fs.suid_dumpable=0

vm.swappiness=10 
vm.vfs_cache_pressure=50
vm.unprivileged_userfaultfd=0
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

kernel.perf_event_paranoid = 3
kernel.sysrq=0
kernel.unprivileged_userns_clone=1
kernel.randomize_va_space=2
kernel.dmesg_restrict=1
kernel.kptr_restrict=2
kernel.unprivileged_bpf_disabled=1
net.core.bpf_jit_harden=2
kernel.yama.ptrace_scope=2
kernel.kexec_load_disabled=1

net.ipv4.tcp_syncookies=1
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_rfc1337=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.tcp_timestamps=0
net.ipv4.ip_forward = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.default.bootp_relay = 0
net.ipv4.conf.all.bootp_relay = 0
net.ipv4.tcp_congestion_control = bbr
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.all.arp_ignore=1

## disable ipv6

sudo echo "net.ipv6.conf.lo.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf
sudo echo "net.ipv6.conf.all.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf
sudo echo "net.ipv6.conf.default.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf

## or can do it like - sudo echo 'net.ipv6.conf.lo.disable_ipv6=1' >> /etc/sysctl.conf

sudo echo 'settingGoesHere' >> /etc/sysctl.conf

#Apply new settings:

sudo sysctl -p  (or reboot)
--------------------------------------------------------------------------------------------------------------------
## Set users allowed to login to console locally 

sudoedit /etc/security/access.conf

#at bottom add:

+:YourUserName:LOCAL
+:YourGroup:LOCAL       <------optional 
-:ALL:ALL

#save and close 
--------------------------------------------------------------------------------------------------------------------
## Prevent standard users execute su:

dpkg-statoverride --update --add root adm 4750 /bin/su

--------------------------------------------------------------------------------------------------------------------
## Set new users to nologin

sudo sed -ie '/^SHELL=/ s/=.*\+/=\/usr\/sbin\/nologin/' /etc/default/useradd
sudo sed -ie '/^DSHELL=/ s/=.*\+/=\/usr\/sbin\/nologin/' /etc/adduser.conf

--------------------------------------------------------------------------------------------------------------------
# view home permissions 

ls -ld /home/USER 

## remove group writeable and others permissions:

chmod g-w /home/yourUserName <----------removes write permissions from groups

chmod o-rwx /home/yourUserName  <-------------removes other read write and execute permissions 

#Remove Others and Groups write permissions from your home folder:

sudo chmod -R 750 /home/yourUserName  <-------same as above just shorter easier to use 

umask 077 or 027
--------------------------------------------------------------------------------------------------------------------
# Restrict the permission on all system crontab directories:  (use Yasat plugin for audit if you like: sudo yasat -p system_rights.test)

cd /etc
#copy & paste 
sudo chown root:root cron.hourly cron.daily cron.weekly cron.monthly cron.d shadow shadow- gshadow group passwd passwd- security sudoers fstab

sudo chmod -R go-rwx cron.hourly cron.daily cron.weekly cron.monthly cron.d



sudo chown root:root /var/spool/cron
sudo chown root:root /etc/default/grub

sudo chmod go-rwx /var/spool/cron
sudo chmod go-rwx /etc/default/grub


sudo chmod 750 /var/log/openvpn

sudo chmod -R o-rxw /etc/snmp
sudo chmod -R o-rxw /etc/apache2
sudo chmod -R o-rxw /etc/postfix

sudo chmod 644 /etc/passwd      <--------if not can be locked out LightDM Greeter ... keep at 644 no less 
sudo chmod 644 /etc/group


sudo chmod 640 /etc/passwd-
sudo chmod 640 /etc/shadow-
sudo chmod 640 /etc/sysctl.conf
sudo chmod 640 /etc/logrotate.conf
sudo chmod 640 /etc/fstab
sudo chmod 640 /etc/sudoers

sudo chmod 600 /root/.bashrc
sudo chmod 600 /root/.profile
sudo chmod 600 /var/log/faillog
sudo chmod 600 /etc/security
sudo chmod 600 /etc/crontab
sudo chmod 600 /etc/anacrontab
sudo chmod 600 /etc/shadow

sudo chmod 400 /etc/gshadow


sudo chmod -R go-rxw /boot

sudo chmod -R o-rxw /home/userName


--------------------------------------------------------------------------------------------------------------------
## block ceratin modules unwanted networking protocols and file types from being installed and or used 

sudo touch /etc/modprobe.d/blacklist.conf

sudo nano /etc/modprobe.d/blacklist.conf

copy and paste (be sure look over you may want to use one of these) 

#Thunderbolt and Firewire can be used for Direct Memory Access (DMA) attacks
install firewire-core /bin/true
install thunderbolt /bin/true

#Blacklist Uncommon Network Protocols
install dccp /bin/true
install sctp /bin/true
install rds /bin/true
install tipc /bin/true
install n-hdlc /bin/true
install ax25 /bin/true
install netrom /bin/true
install x25 /bin/true
install rose /bin/true
install decnet /bin/true
install econet /bin/true
install af_802154 /bin/true
install ipx /bin/true
install appletalk /bin/true
install psnap /bin/true
install p8023 /bin/true
install llc /bin/true
install p8022 /bin/true

#Block uncommon filesystems
install cramfs /bin/true
install freevxfs /bin/true
install jffs2 /bin/true
install hfs /bin/true
install hfsplus /bin/true
install squashfs /bin/true
install udf /bin/true

#Blacklist the webcam kernel module <-----------may need
install uvcvideo /bin/true

#Blacklist bluetooth module <------------may need
install btusb /bin/true
install bluetooth /bin/true

#Blacklist IPv6         <--------- may need
install ipv6 /bin/true

# Blacklist USB Mass Storage Devices <--------------may need :) 
install usb-storage /bin/true

Save and close 

--------------------------------------------------------------------------------------------------------------------
## Install a more secure DNS that uses HTTPS proxy (can choose between Google or Cloudflare)

sudo apt install dnss

It comes with Google 8.8.8.8 DNS over HTTPS set as default to change :


# Use Cloudflare's 1.1.1.1:
sudo dnss -enable_dns_to_https -https_upstream="https://1.1.1.1/dns-query"

# Use Google's dns.google:
sudo dnss -enable_dns_to_https -https_upstream="https://dns.google/dns-query"

That's it :)

--------------------------------------------------------------------------------------------------------------------
## Next add some software security and what not pick and choose ...

sudo apt update && sudo apt install logwatch auditd rkhunter chkrootkit yasat lynis stacer gnome-logs fcheck rsyslog

#Yasat is a easy auditing tool I use to check permissions and couple other plugins all depends on what your device is set up with ...

To use Yasat just type: sudo yasat -l <======this list the plugins pick one and then type:

sudo yasat -p pluginNameGoesHere

That's it let it complete and look over see what it found ...


#Lynis also a auditing program 

sudo lynis audit system



#fcheck is used for integrity like aide or tiger it can be used as a IDS detect modifications to your files and folders 

to use just type : sudo fcheck -ac <======builds the database 

can also do : sudo fcheck -acsirx <------builds database with improved options for Linux

builds db plus hashes files so that any modifications will be detected and the -r is report mode also worth using :)and the x provides extended checks such as permissions and links- once database completes it's done in the future to see what has changed just type the samething without the -c in it so it'd be : 

sudo fcheck -asirx 

One other thing any updates you install or software you'll need to run the database command over 



#rtkhunter root kit scan & more to begin using :

sudo rkhunter --propupd 

Then to scan system:

rkhunter --check --sk


#chkrootkit similar to above but much smaller and fewer options 

Look for suspicious strings:

sudo chkrootkit -x | less

Run scan:

sudo chkrootkit



#logwatch is a great program to keep to give you a summary that's taken from your logs:

sudo logwatch --range All --archives --detail Med

sudo logwatch | less

logwatch –mailto [email protected] –range All 



#auditd see this site: https://www.xmodulo.com/how-to-monitor-file-access-on-linux.html and or https://bookofzeus.com/harden-ubuntu/monitoring-tools/auditd/


#Audit daemon will turn on kernel auditing at boot and load rules

#add rules to the conf file /etc/audit/audit.rules

after some rules have been added in the future to check them :

sudo ausearch -f PATH (example sudo ausearch -f /home/stv/Passwords) or sudo ausearch -f passwd

sudo service auditd rotate

aureport -l -i -ts yesterday -te today

aureport --anomaly

#If access violations stand out, review them with:
ausearch --key access --raw

aureport --file --summary

#To review what executables are doing:
ausearch --key access --raw

aureport -x --summary


Setup correctly
● Add audit=1 to grub.conf kernel config line
● Have /var/log/audit on its own partition
● Edit /etc/audit/auditd.conf
● flush parameter should be set to sync or data
● max_log_file and num_logs need to be adjusted so that you get complete use
of your partition
● space_left should be set to a number that gives the admin enough time to react
to any alert message and perform some maintenance to free up disk space
● disk_full_action is triggered when no more room exists on the partition. All
access should be terminated since no more audit capability exists.

Set some defaults
● Place watches on critical files
● Edit /etc/audit/audit.rules
● -w /etc/shadow -p wa -k shadow
● Monitor important syscalls
● -a exit,always -S open -S openat -F exit=-EPERM

--------------------------------------------------------------------------------------------------------------------
## Method 1 Change umask settings (file creation permissions) to a more secure setting system wide:

#In these two files: 

/etc/pam.d/common-session
/etc/pam.d/common-session-noninteractive

add this:  session optional pam_umask.so umask=0027 

save exit reboot 

now umask should say 0027 which is same as 750

some like 0077 but it's bit strict for me anyway that would be permission of 700 rwx read write and execute for the user only and that maybe okay in your /home directory but everywhere possible issues...


## Method 2

 sudo sed -ie '/^UMASK\s\+/ s/022/077/' /etc/login.defs


#Method 3

sudoedit bash.bashrc

add:  umask 0027 

close & save 

--------------------------------------------------------------------------------------------------------------------
## set a root password and then lock root account if you like but if things go wrong and you need to login as root :(

sudo passwd root

(it'll prompt you to enter new password)

then lock root account if you like:

sudo passwd root -l 

to unlock: sudo passwd -u
-------------------------------------------------------------------------------------------------------------------------
## Set trim to run daily instead of weekly that is default 

#create a folder: 
sudo mkdir -v /etc/systemd/system/fstrim.timer.d

#create file in folder:
sudo touch /etc/systemd/system/fstrim.timer.d/override.conf

#edit new file
sudo nano /etc/systemd/system/fstrim.timer.d/override.conf

#copy and paste into file then close and save:

[Timer]
OnCalendar=
OnCalendar=daily


#reboot and now it will run daily to check it ran in the future just type:

journalctl | grep fstrim.service

--------------------------------------------------------------------------------------------------------------------

## At and Cron (use Yasat plugin for audit)
Only allow root and people with verified need to run cron jobs
Setup cron.allow and cron.deny
Setup equivalents if you have 'at' installed

##SSH (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/ssh/  
#Easy audit ssh with yasat: sudo yasat -p ssh.test
Enable only ssh2 protocol 
Install fail2ban
Do not allow root logins
Consider adding group permission for logins, AllowGroups wheel

##MYSQL (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/mysql/
#Audit with yasat: sudo yasat -p mysql.test
If database is used internally to machine, make it listen on localhost
 Change passwords

##Apache (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/apache/
#Audit with yasat: sudo yasat -p apache_conf.test
sudo yasat -p apache_modules.test
sudo yasat -p apache_vhosts.test
#Remove all unneeded modules
Use mod_security to weed out injection attacks
Set correct SE Linux Booleans to maintain functionality and
protection

##Iptables : https://bookofzeus.com/harden-ubuntu/hardening/setup-iptables/
#Audit with yasat: sudo yasat -p firewall.test

##Secure Postfix: https://bookofzeus.com/harden-ubuntu/software/secure-postfix/
#Audit with yasat: sudo yasat -p postfix.test

##NTP Network Time Protocol audit with yasat: sudo yasat -p ntp.test
--------------------------------------------------------------------------------------------------------------------

pam_tally2
● This is used to lockout an account for consecutive failed login
attempts

pam_access
● Used to forbid logins from certain locations, consoles, and
accounts
● /etc/security/access.conf controls its config

pam_time
● Used to forbid logins during non-business hours
● /etc/security/time.conf controls its config

pam_limits
● Used to limit maximum concurrent sessions and other user restrictions
● /etc/security/limits.conf controls its config

pam_loginuid
● Used for all entry point daemons to set the task's loginuid and session
identifier
● Loginuid and session ID are inherited by all processes at fork
● Stored inside the task struct in the kernel
● Using require-auditd module option will forbid login if auditd is not running

Limit access to su command
● Edit /etc/pam.d/su
● Uncomment the line saying require wheel to allow uid change
auth required pam_wheel.so use_uid

dpkg-statoverride --update --add root adm 4750 /bin/su

--------------------------------------------------------------------------------------------------------------------
Compile Kernel steps:

# cd /usr/src/linux
# make mrproper		# Clean everything, including config files
# make oldconfig	# Reuse the old .config if existent
# make menuconfig	# or xconfig (Qt) or gconfig (GTK)
# make			# Create a compressed kernel image
# make modules		# Compile the modules
# make modules_install	# Install the modules
# make install		# Install the kernel
# reboot

# Disable Compilers until needed:


sudo chmod 000 /usr/bin/kgcc
sudo chmod 000 /usr/bin/cc
sudo chmod 000 /usr/bin/gcc
sudo chmod 000 /usr/bin/*c++
sudo chmod 000 /usr/bin/*g++  

When needed just:

sudo hmod 755 /usr/bin/kgcc
sudo hmod 755 /usr/bin/cc
sudo hmod 755 /usr/bin/gcc
sudo hmod 755 /usr/bin/*c++
sudo hmod 755 /usr/bin/*g++
--------------------------------------------------------------------------------------------------------------------
## Top <3<3<3

• u [user name] To display only the processes belonging to the user. Use + or blank to see
all users
• k [pid] Kill the process with pid.
• 1 To display all processors statistics (Linux only)
• R Toggle normal/reverse sort 

SHIFT + M  sets memory + C will take you back to default CPU

F lets you adjust the fields 
--------------------------------------------------------------------------------------------------------------------
## Browser Tips 


if you added firejail sandbox and then ran in terminal: sudo firecfg   then skip the following

right click a browser icon then click properties and edit now add firejail to the beginning of its command 

firefox can make use of seccomp: firejail --seccomp firefox    thus limiting its access chromium can not use as it has its own however can still benefit from firejail: firejail chromium

to see if it's sandboxed just type: firejail --list and or for more detail: firejail --tree

reccomend adding:  noscript browser extension then in its setting select "Temporarily set top-level sites to TRUSTED" and "
Any capability blocked in the top document must be blocked in its subdocuments too" 

one more extension that is light and helpful is:  Ublock Origin    after installed adjust your filters list by clicking on their gears icon and you may want to add this filter to the list by selecting import at the bottom of the filter settings and pasting: 

https://github.com/notracking/hosts-blocklists/raw/master/adblock/adblock.txt

In chromium type in address bar: chrome://flags   then press enter

enable: Block scripts loaded via document.write

enable: Strict-Origin-Isolation

enable: Support for HTTPS records in DNS

enable: Throttle non-visible cross-origin iframes

enable: CSP policy for Web Payment API

There are many more options may have to tinker around until you get it how you like it :) 
----------------------------------------------------------------------------------------------------------------------------









