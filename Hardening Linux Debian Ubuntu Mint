Notes from various books and or articles - websites on mainly hardening - securing Linux hopefully it saves you some time searching online ...


## Installation 

use lvm with seperate:  /boot / /home /opt /usr /var /tmp /var/log /var/tmp   encrypted w/ LUKS


a tip I learned for efficiency after install was have one big home by creating soft links from /opt and /usr/local to home like so:

sudo ln -s /opt /home/opt

sudo ln -s /usr/local /home/local

Then secure /var/tmp:

sudo ln -s /tmp /var/tmp    

add nosuid to all partitions in /etc/fstab besides /usr (usr will be read only)

add nodev to all besides / root 

add noexec,nodev,nosuid to /tmp /var/tmp /dev/shm

Set /tmp and /var/tmp so that a user can only delete their own files with sticky bit:

sudo chmod 1777 /tmp /var/tmp

set /boot to ro (read only)  

set /usr to ro (read only)

#If /usr is mounted ro "read only" then package manager can't install - update software unless you remove read only or add the following to the apt.conf so that it automatically chnages /usr to read only right before updates and or before installing software:

cd /etc/apt/apt.conf.d/

sudo nano 70debconf

copy paste:

DPkg
{
Pre-Invoke { "mount /usr -o remount,rw" };
};

Then close and save. This will set /usr to read write so that it can install software and or updates and once your finished updating and or installing software just type in terminal: 

sudo mount -o remount,ro /usr        <-----back to read only mode

You could have DPkg try and mount it back to read only automatically after installing software and or updates but it's buggy best just do the command yourself in terminal. 



To make it even easier create an short alias to cut down on the typing: sudo touch .bash_aliases 

Now edit it: sudoedit .bash_aliases 

add to the file something like:

alias mountrw='sudo mount -o remount,rw /boot /usr'

alias mountro='sudo mount -o remount,ro /usr /boot'

Give it the right permissions & owner : sudo chmod 644 .bash_aliases 

sudo chown yourUserName:yourUserName .bash_aliases

Now all you have to type to make it read only is: mountro or to mount read write just type: mountrw




*Information:

noexec – Prevents execution of binaries on mounted file systems. This prevents remote users from executing unwanted binaries on your system.

nosuid – Disables set-user-identifier or set-group-identifier bits. This prevents remote users from gaining higher privileges by running a setuid program.

nodev – Prevents character and block special devices from being defined, or if they exist, from being used as character and block special devices. This prevents remote users from getting out of chrooted server jails.
-------------------------------------------------------------------------------------------------------------------------------------------------
## Partition Mount Example:   https://obscurix.github.io/security/mount-options.html

sudoedit /etc/fstab

#Start

# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/dev/mapper/tuta--vg-root /               ext4    noatime,nosuid,errors=remount-ro 0       1
# /boot was on /dev/nvme0n1p2 during installation
UUID=31fc417f-98e9-4dca-9328-281e7b9b2b1a /boot           ext2    ro,noatime,nodev 0       2   <-----read only boot
# /boot/efi was on /dev/nvme0n1p1 during installation
UUID=AB9C-A988  /boot/efi       vfat    umask=0077      0       1
/dev/mapper/tuta--vg-home /home           ext4    rw,noatime,nodev,nosuid	0       2
/dev/mapper/tuta--vg-tmp /tmp            ext4    rw,noatime,nodev,nosuid,noexec	0       2
/dev/mapper/tuta--vg-user /usr            ext4    ro,noatime,nodev   0       2           <-------read only user 
/dev/mapper/tuta--vg-var /var            ext4    noatime,nodev,nosuid 0       2
/dev/mapper/tuta--vg-logs /var/log        ext4    rw,noatime,nodev,nosuid,noexec 0       2
/dev/mapper/tuta--vg-vartmp /var/tmp        ext4    rw,noatime,nodev,nosuid,noexec	0       2
/dev/mapper/tuta--vg-swap_1 none            swap    sw              0       0

udev /dev devtmpfs rw,nosuid,noexec,noatime 0 00                                       
devpts /dev/pts devpts rw,newinstance,ptmxmode=0666 0 0                                       
tmpfs /dev/shm tmpfs rw,nodev,nosuid,noexec 0 0     <----secure shared memory                                   
tmpfs /home/userName/.cache tmpfs rw,size=600M,noexec,noatime,nodev,uid=userName,gid=userGroup,mode=700 0 0    <-----load cache in RAM 

#End              https://book.hashbang.sh/docs/security/linux_hardening/
-------------------------------------------------------------------------------------------------------------------------------------------------
## Work for gov and or mil and or have sensitive data that one could try forcing you to get to then install cryptsetup-nuke-password:

This provides a relatively stealth way to make your data unreadable in case of emergency

sudo apt install cryptsetup-nuke-password 

To use type in terminal: sudo dpkg-reconfigure cryptsetup-nuke-password 

and it'll prompt you for a password and to confirm it. Be certain it is different from your regular login password.

That's it! 

This will Erase Your LUKS key (private encryption key) when a certain special password is entered (that you made up) at the default unlock prompt if you fear seizure of your data this way the data can never be decrypted
-------------------------------------------------------------------------------------------------------------------------------------------------
## Adding user: 

#(Existing) Already have account and want to add it to sudo and or admin:

sudo adduser "$USER" adm

sudo adduser "$USER" systemd-journal

sudo adduser "$USER" sudo

sudo useradd -m -s /bin/bash bob -g sudo   <----------At creation time

## useradd options: 

Option                                Description
-c comment                    The new user’s password file comment field.
-d homedir                    The user’s home directory.
-g initial group              The group name or number of the user’s initial login group.
-G group1,group2              A list of additional groups of which the user is to be a member.
-m                            Create the user’s home directory if it does not exist.
-M                            Do not create the user’s home directory.
-n                            Linux usually creates a group with the same name as the user automatically
                              when the user is created. This option disables that behavior.
-r                            You can create a system account (with a UID in the range of system
                              accounts).
-p password                   Specifies the user’s password.
-s shell                      Specifies the shell the user will use.
-e date                       Specifies the default expiry date
-f days                       Specifies the number of days after a password has expired before
                              the account will be disabled
-b path/to/default/home       Specifies the initial path prefix of a new user’s home directory             
Example:
sudo useradd john_doe -m -s /bin/bash -g sudo -G adm,systemd-journal -c 'bob knight'

# Adding Groups

add a new group: sudo groupadd sales

Option                           Description
-g GID                    Set the GID for the group. This must be a unique number.
-r                        Creates a system group (with a GID inside the system GID range).
-f                        Exits if the group already exists

to remove a group type: sudo groupdel sales


sudo find / -group johnDoe -exec chgrp newGroup {} \;   (if user changes group then locate all their files from old group and set to the new group)


# add yourself to sudoers file type:  sudo visudo 

(underneath root in User privilege specification) put your userName and then ALL=(ALL:ALL) ALL just like root above then

 close ctrl x then y last press Enter 

Example:

root            ALL=(ALL:ALL) ALL
yourUserName    ALL=(ALL:ALL) ALL    <------------- like this 
-------------------------------------------------------------------------------------------------------------------------------------------------
## install firewall then add rules last activate:

sudo apt install ufw 

sudo ufw default deny   <----blocks in allows out 

sudo ufw default deny outgoing   <----block out also if you like

sudo ufw deny telnet

sudo ufw deny ftp   <-------may need

sudo ufw deny ssh  <------may need

sudo ufw deny from xxx.xxx.xxx.xxx    <-------block any ip address

#now lets add rules for out

sudo ufw allow out 443/tcp  <-------(https)

sudo ufw allow out 80/tcp  <-------(http for most all your updates ... mirrors)

sudo ufw allow out 53 	<------(dns)

sudo ufw allow out 123 <--------(time)

sudo ufw allow out 67	<-------(dhcp)

sudo ufw allow out 25/tcp <-----(email smtp) 

sudo ufw allow out 853/tcp <---DNS + TLS 

sudo ufw enable 

sudo systemctl enable --now ufw

sudo ufw status verbose  <---------take a look at your work see if missing anything ... 

lastly go to the folder /etc/ufw and find "before rules" open for editing then locate the icmp, multicast, & UPNP rules. Place a # sign to comment out finally save and reload ufw: sudo ufw reload


check your rules with: sudo ufw staus verbose 

or : sudo ufw status numbered 

to delete sudo ufw delete (numberGoesHere) or sudo ufw delete deny ssh ...

Of course some will need inbound rules perhaps ssh: sudo ufw allow in 22/tcp or for a server: sudo ufw allow in 443/tcp
sudo ufw allow in 80/tcp
-------------------------------------------------------------------------------------------------------------------------------------------------
## set timesyncd to use cloudflare & apple 

sudo echo "NTP=time.cloudflare.com" | sudo tee -a /etc/systemd/timesyncd.conf

sudo echo "FallbackNTP=time.apple.com" | sudo tee -a /etc/systemd/timesyncd.conf
-------------------------------------------------------------------------------------------------------------------------------------------------
## Deny all in /etc/hosts.deny

sudoedit /etc/hosts.deny 

#At the bottom remove the # sign beside ALL:PARANOID 

#then save and close 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Disable Services if you are not planning on using:

## disable cups

sudo systemctl disable cups.socket cups.path cups.service
sudo systemctl mask cups.socket cups.path cups.service
sudo systemctl kill --signal=SIGKILL cups.service
sudo systemctl stop cups.socket cups.path

sudo systemctl disable cups-browsed
sudo systemctl mask cups-browsed
sudo systemctl stop cups-browsed



## disable avahi

sudo systemctl disable avahi-daemon.socket avahi-daemon.service
sudo systemctl mask avahi-daemon.socket avahi-daemon.service
sudo systemctl stop avahi-daemon.socket avahi-daemon.service



## disable error reports:
sudo systemctl stop apport.service
sudo systemctl disable apport.service
sudo systemctl mask apport.service

sudo systemctl stop whoopsie.service
sudo systemctl disable whoopsie.service
sudo systemctl mask whoopsie.servic



## disable bluetooth if not used 

sudo systemctl disable bluetooth.service
sudo systemctl mask bluetooth.service

sudo systemctl disable bluez
sudo systemctl mask bluez



## disable speech-dispatcher 

sudo systemctl disable speech-dispatcher
sudo systemctl mask speech-dispatcher




## disable wpa if not needed 

sudo systemctl disable wpa_supplicant
sudo systemctl mask wpa_supplicant



## disable unattended-upgrades 

sudo systemctl disable unattended-upgrades
sudo systemctl mask unattended-upgrades


## Remove packages: 

sudo apt purge popularity-contest* whoopsie* bluez* orca* speech-dispatcher* sane-airscan* sane-utils*

-------------------------------------------------------------------------------------------------------------------------------------------------
## Install firejail and apparmor   https://pvera.net/posts/apparmor-firejail-sandboxing/

sudo apt update
sudo apt install firejail firejail-profiles

sudo apt install apparmor apparmor-notify apparmor-profiles apparmor-utils apparmor-profiles-extra

sudo firecfg (creates softlinks to all programs that firejail has a profile to so that when clicked their sandboxed profile loads, however I have some issues with some software and prefer selecting just a few like browser hexchat evince ...)


#deny a app internet access just edit icon and add this to beginning of its command: firejail --protocol=unix

Example: $firejail --protocol=unix vlc

 
systemctl enable --now apparmor

systemctl status apparmor

sudo aa-enforce /etc/apparmor.d/*

sudo aa-enforce firejail-default 

sudo apparmor_parser -r /etc/apparmor.d/firejail-default


#start inotify 

sudo /usr/bin/aa-notify -p -w 10

check messages of aa-notify: $sudo aa-logprof


#add to grub:

sudo nano /etc/default/grub     "splash apparmor=1 lockdown=integrity lsm=lockdown,yama,apparmor"

#status of apparmor shows enforced and more ...

sudo aa-status

ps auxZ | grep -v '^unconfined'
-------------------------------------------------------------------------------------------------------------------------------------------------
sudoedit /etc/X11/Xwrapper.config  

then add this:  needs_root_rights = no

Close (Ctrl X and then save press Y lastly exit by pressing Enter)
-------------------------------------------------------------------------------------------------------------------------------------------------
## Tmp mount in  RAM:

sudo cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/

sudo systemctl enable tmp.mount

#reboot 

systemctl status tmp.mount
-------------------------------------------------------------------------------------------------------------------------------------------------
## Create a tmp & then secure /tmp and /var/tmp:

#Securing /tmp folder

#Create a 1 GB or larger if you like /tmp partition:

sudo dd if=/dev/zero of=/usr/tmpDSK bs=1024 count=1024000


#Create backup of current /tmp folder:

sudo cp -Rpf /tmp /tmpbackup


#Mount new /tmp partition and set permissions:

sudo mount -t tmpfs -o loop,noexec,nosuid,rw /usr/tmpDSK /tmp
sudo chmod 1777 /tmp


#Copy data from backup folder then remove backup folder:

sudo cp -Rpf /tmpbackup/* /tmp/
sudo rm -rf /tmpbackup/*


#Add /tmp to the fstab

/usr/tmpDSK /tmp tmpfs loop,nosuid,noexec,rw 0 0


#Finally mount it or reboot

sudo mount -o remount /tmp


## Secure /var/tmp
Securing the /var/tmp because some software use this folder as a temporary folder. Any files and folders within this directory needs to be secured. We will use the /tmp folder we just created by creating a symbolic link (soft-link)

sudo mv /var/tmp /var/tmpold
sudo ln -s /tmp /var/tmp  <------creates a soft symlink to tmp thus combining the two together
sudo cp -prf /var/tmpold/* /tmp/
sudo rm -rf /var/tmpold/

Then reboot      https://bookofzeus.com/harden-ubuntu/server-setup/secure-tmp-var-tmp/
-------------------------------------------------------------------------------------------------------------------------------------------------
## Disable IRQ Balance, edit /etc/default/irqbalance:

sudo vi /etc/default/irqbalance
And Change the ENABLED value to 0:

ENABLED=0
-------------------------------------------------------------------------------------------------------------------------------------------------
## Improve performance
#Swappiness in the file should be set to 1 Skipping this step may cause both poor performance, whereas setting it to 1 will cause swap to act as an emergency buffer, preventing out-of-memory crashes. You can do this with the following commands:

sudo echo 'vm.swappiness=1' >> /etc/sysctl.conf


#also if you have pleny of Ram > 12GB:

# Improve cache management

sudo echo 'vm.vfs_cache_pressure=50' >> /etc/systemctl.conf
-------------------------------------------------------------------------------------------------------------------------------------------------
## Secure SWAP
To prevent the file from being world-readable, you should set up the correct permissions on the swap file:

sudo chown root:root /swapfile
sudo chmod 0600 /swapfile

Reboot
-------------------------------------------------------------------------------------------------------------------------------------------------
## Kernel settings placed in grub to apply: https://theprivacyguide1.github.io/linux_hardening_guide#boot_parameters

*note: substitue amd_iommu=on for Intel cpu add: intel_iommu=on
If using ipv6 then remove: ipv6.disable=1 
If not using audit then remove: audit=1


https://vez.mrsk.me/linux-hardening.html

Type in terminal:

sudoedit /etc/default/grub

Then locate GRUB_CMDLINE_LINUX_DEFAULT= and add the following so it looks like:

GRUB_CMDLINE_LINUX_DEFAULT="splash apparmor=1 lockdown=confidentiality lsm=lockdown,yama,apparmor modules.sig_enforce=1 slub_debug=F page_alloc.shuffle=1 init_on_alloc=1 init_on_free=1 slab_nomerge audit=1 amd_iommu=on iommu=pt ipv6.disable=1"
-------------------------------------------------------------------------------------------------------------------------------------------------
## Set Kernel and Network settings using Sysctl audit with lynis or yasat if yasat: sudo yasat -p network.test and if using lynis: sudo lynis audit system

## sudoedit /etc/sysctl.conf :


dev.tty.ldisc_autoload=0

fs.protected_symlinks=1
fs.protected_hardlinks=1
fs.protected_fifos=2
fs.protected_regular=2
fs.suid_dumpable=0

vm.swappiness=1
vm.vfs_cache_pressure=100
vm.unprivileged_userfaultfd=0
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

kernel.sysrq=0
kernel.perf_event_paranoid = 3
kernel.unprivileged_userns_clone=1  <----------if set to 0 breaks some software
kernel.randomize_va_space=2
kernel.dmesg_restrict=1
kernel.kptr_restrict=2
kernel.unprivileged_bpf_disabled=1
kernel.yama.ptrace_scope=2
kernel.kexec_load_disabled=1
kernel.deny_new_usb=1       <---------may need usb devices

net.core.bpf_jit_harden=2
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_rfc1337=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.tcp_timestamps=0
net.ipv4.ip_forward = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.default.bootp_relay = 0
net.ipv4.conf.all.bootp_relay = 0
net.ipv4.tcp_congestion_control = bbr
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.all.arp_ignore=1

## disable ipv6 <-----may need ipv6 

sudo echo "net.ipv6.conf.lo.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf
sudo echo "net.ipv6.conf.all.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf
sudo echo "net.ipv6.conf.default.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf

## or can do it like - sudo echo 'net.ipv6.conf.lo.disable_ipv6=1' >> /etc/sysctl.conf

sudo echo 'settingGoesHere' >> /etc/sysctl.conf

#Apply new settings:

sudo sysctl -p  (or reboot)
-------------------------------------------------------------------------------------------------------------------------------------------------
## Only allow root to log in locally and add yourself (username) along with any other users ...

*note if you have more than one user just put a space after yourUserName and simply add the others the same way with their user name

sudoedit /etc/security/access.conf

#at bottom add:

-:ALL EXCEPT root:tty1 yourUserName shutdown sync:LOCAL  <-----optional 

#save and close 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Prevent standard users execute su:

dpkg-statoverride --update --add root adm 4750 /bin/su

-------------------------------------------------------------------------------------------------------------------------------------------------
## Set new users to nologin

sudo sed -ie '/^SHELL=/ s/=.*\+/=\/usr\/sbin\/nologin/' /etc/default/useradd
sudo sed -ie '/^DSHELL=/ s/=.*\+/=\/usr\/sbin\/nologin/' /etc/adduser.conf

-------------------------------------------------------------------------------------------------------------------------------------------------
# view home permissions 

ls -ld /home/USER 

## remove group writeable and others permissions:

chmod g-w /home/yourUserName <----------removes write permissions from groups

chmod o-rwx /home/yourUserName  <-------------removes other read write and execute permissions 

#Remove Others and Groups write permissions from your home folder:

sudo chmod 750 /home/yourUserName  <-------same as above just shorter easier to use 
-------------------------------------------------------------------------------------------------------------------------------------------------
# Restrict the permission on all system crontab directories:  (use Yasat plugin for audit if you like: sudo yasat -p system_rights.test)

cd /etc
#copy & paste 
sudo chown root:root cron.hourly cron.daily cron.weekly cron.monthly cron.d shadow shadow- gshadow group passwd passwd- security sudoers fstab

sudo chmod -R go-rwx cron.hourly cron.daily cron.weekly cron.monthly cron.d


The execute bit "x" does not mean to execute; it means to search. The read "r" permission for a directory allows
the filenames in the directory to be read, but the files themselves cannot be accessed without directory search "x" permission 



sudo chown root:root /var/spool/cron
sudo chown root:root /etc/default/grub

sudo chmod go-rwx /var/spool/cron
sudo chmod go-rwx /etc/default/grub


sudo chmod 750 /var/log/openvpn

sudo chmod -R o-rxw /etc/snmp
sudo chmod -R o-rxw /etc/apache2

sudo chmod -R 755 /etc/postfix   <---------postfix needs to be 755 besides its config files

sudo chmod 644 /etc/passwd   <--------if not can be locked out LightDM Greeter (or other greeters) ... keep at 644 no less 
sudo chmod 644 /etc/group

sudo chmod 644 /etc/shadow  <-----shadow needs 644 permissions if you used shadow when setting up passwords if less than 644 you will not be able to login at the lock screen (click swith user to log back in) 


sudo chmod 640 /etc/passwd-
sudo chmod 640 /etc/shadow-
sudo chmod 640 /etc/sysctl.conf
sudo chmod 640 /etc/logrotate.conf
sudo chmod 640 /etc/fstab
sudo chmod 440 /etc/sudoers <-------fine if already added users to sudoers if not keep at 640

sudo chmod 600 /root/.bashrc
sudo chmod 600 /root/.profile
sudo chmod 600 /var/log/faillog
sudo chmod 600 /etc/security
sudo chmod 600 /etc/crontab
sudo chmod 600 /etc/anacrontab

sudo chmod 400 /etc/gshadow

sudo chmod o-rxw /boot

sudo chmod og-rxw /home/userName

sudo chmod 700 /root /home /boot /usr/lib/modules

# Disable Compilers until needed:
sudo chmod 000 /usr/bin/kgcc
sudo chmod 000 /usr/bin/cc
sudo chmod 000 /usr/bin/gcc
sudo chmod 000 /usr/bin/*c++
sudo chmod 000 /usr/bin/*g++  

When needed just:
sudo hmod 755 /usr/bin/kgcc
hmod 755 /usr/bin/cc
hmod 755 /usr/bin/gcc
hmod 755 /usr/bin/*c++
hmod 755 /usr/bin/*g++
-------------------------------------------------------------------------------------------------------------------------------------------------
## block ceratin modules - antique networking protocols and file types from being installed and or used 

sudo touch /etc/modprobe.d/blacklist.conf

sudo nano /etc/modprobe.d/blacklist.conf

copy and paste (be sure look over you may want to use one of these) 

#Thunderbolt and Firewire can be used for Direct Memory Access (DMA) attacks
install firewire-core /bin/true
install thunderbolt /bin/true

#Blacklist Uncommon Network Protocols
install dccp /bin/true
install sctp /bin/true
install rds /bin/true
install tipc /bin/true
install n-hdlc /bin/true
install ax25 /bin/true
install netrom /bin/true
install x25 /bin/true
install rose /bin/true
install decnet /bin/true
install econet /bin/true
install af_802154 /bin/true
install ipx /bin/true
install appletalk /bin/true
install psnap /bin/true
install p8023 /bin/true
install llc /bin/true
install p8022 /bin/true

#Block uncommon filesystems
install cramfs /bin/true
install freevxfs /bin/true
install jffs2 /bin/true
install hfs /bin/true
install hfsplus /bin/true
install squashfs /bin/true
install udf /bin/true

#Blacklist the webcam kernel module <-----------may need
install uvcvideo /bin/true

#Blacklist bluetooth module <------------may need
install btusb /bin/true
install bluetooth /bin/true

#Blacklist IPv6         <--------- may need
install ipv6 /bin/true

# Blacklist USB Mass Storage Devices <--------------may need :) 
install usb-storage /bin/true

Save and close 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Install secure DNS that uses HTTPS proxy (can choose between Google or Cloudflare) or use systemd with TLS 

sudo apt install dnss

It comes with Google 8.8.8.8 DNS over HTTPS set as default to change :

# Use Cloudflare's 1.1.1.1:
sudo dnss -enable_dns_to_https -https_upstream="https://1.1.1.1/dns-query"

# Use Google's dns.google:
sudo dnss -enable_dns_to_https -https_upstream="https://dns.google/dns-query"

That's it! 
-------------------------------------------------------------------------------------------------------------------------------------------------
DNS another method and perhaps the best: Make use of systemd with TLS & DNSSEC just install:

sudo apt install systemd-resolved 

Next edit the config file:

sudoedit /etc/systemd/resolved.conf

next to #DNS remove the # sign (uncomment) and then type 1.1.1.1 (see below)

next to #DNSSEC remove # sign and type yes after thus removing the existing "no" (see below)

lastly scroll down a little and you'll see #DNSOverTLS=yes remove # sign (uncomment) and make sure it reads "yes" so that it ends up all looking like this:

********************************************************

DNS=1.1.1.1
FallbackDNS=1.0.0.1
#Domains=
DNSSEC=yes
DNSOverTLS=yes
#MulticastDNS=yes
#LLMNR=yes
#Cache=yes
#CacheFromLocalhost=no
#DNSStubListener=yes
#DNSStubListenerExtra=
#ReadEtcHosts=yes
#ResolveUnicastSingleLabel=no

********************************************************

afterwards test by visiting this site: https://1.1.1.1/help and look at DNS TLS it should now read Yes

also test DNSSEC http://dnssec-or-not.com/  if all is well then he gives you a thumbs up 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Next add some software security and what not pick and choose ...

sudo apt update && sudo apt install logwatch auditd rkhunter chkrootkit yasat lynis stacer fcheck debsums debsecan gnome-logs
(gnome-logs is handy to have to quickly spot problems in the Journal) or type in terminal:  journalctl | grep failed  &  journalctl | grep error


#Yasat - is a easy auditing tool I use to check permissions and couple other plugins all depends on what your device is set up with ...

To use Yasat just type: sudo yasat -l <------this list the plugins pick one and then type:

sudo yasat -p pluginNameGoesHere

That's it let it complete and look over see what it finds...



#Lynis - also a auditing program (good idea to download from their website so you have the latest version) 

https://cisofy.com/downloads/lynis/

sudo lynis audit system

After audit completes view all suggestions and warnings by typing in terminal:  grep -E "^warning|^suggestion" /var/log/lynis-report.dat



#fcheck - is used for integrity like aide or tiger it can be used as a IDS detect modifications (new links added or removed-permissons altered -added deleted files and or directories added or removed) to your files and folders ~

*note some users like to add a file named like MyPasswords or something to entice a intruder into viewing or deleting :) then adding to the files to be watched be sure and go to the config file of fcheck (etc/fcheck) and either add or remove watched files and or directories...

to use just type : sudo fcheck -ac <======builds the database 

can also do : sudo fcheck -acsirx <------builds database with improved options for Linux; use this one :)

builds db plus hashes files so that any modifications will be detected and the -r is report mode also worth using :)and the x provides extended checks such as permissions and links- once database completes it's done in the future to see what has changed just type the samething without the -c in it so it'd be : 

sudo fcheck -asirx 

One other thing any updates you install or software you'll need to run the database command over 



#rtkhunter - root kit scan & more to begin using :

sudo rkhunter --propupd 

Then to scan system:

rkhunter --check --sk


#chkrootkit - similar to above but much smaller and fewer options 

Look for suspicious strings:

sudo chkrootkit -x | less

Run scan:

sudo chkrootkit > scan   <-----perform a scan and send the output to a file in your home directory nammed scan to look over soon as scan completes



#logwatch is a great program to keep to give you a summary that's taken from your logs:

sudo logwatch --range All --archives --detail Med

sudo logwatch | less

logwatch –mailto [yourEmailAddress] –range All 



#auditd see this site: https://www.xmodulo.com/how-to-monitor-file-access-on-linux.html and or https://bookofzeus.com/harden-ubuntu/monitoring-tools/auditd/


#Audit daemon will turn on kernel auditing at boot and load rules

#add rules to the conf file /etc/audit/audit.rules

after some rules have been added in the future to check them :

sudo ausearch -f pathOfFileOrFolder

sudo service auditd rotate

aureport -l -i -ts yesterday -te today

aureport --anomaly

#If access violations stand out, review them with:
ausearch --key access --raw

aureport --file --summary

#To review what executables are doing:
ausearch --key access --raw

aureport -x --summary


Setup correctly
● Add audit=1 to grub.conf kernel config line
● Have /var/log/audit on its own partition
● Edit /etc/audit/auditd.conf
● flush parameter should be set to sync or data
● max_log_file and num_logs need to be adjusted so that you get complete use
of your partition
● space_left should be set to a number that gives the admin enough time to react
to any alert message and perform some maintenance to free up disk space
● disk_full_action is triggered when no more room exists on the partition. All
access should be terminated since no more audit capability exists.

Set some defaults
● Place watches on critical files
● Edit /etc/audit/audit.rules
● -w /etc/shadow -p wa -k shadow
● Monitor important syscalls
● -a exit,always -S open -S openat -F exit=-EPERM

-------------------------------------------------------------------------------------------------------------------------------------------------
## Method 1 Change umask settings (file creation permissions) to a more secure setting system wide:
https://linuxaria.com/article/linux-shell-understanding-umask-with-examples

#In these two files: 

/etc/pam.d/common-session
/etc/pam.d/common-session-noninteractive

add this:  session optional pam_umask.so umask=0077 

save exit reboot 

now umask should say 0077 which is same as 700


## Method 2

sudo sed -ie '/^UMASK\s\+/ s/022/077/' /etc/login.defs


# Method 3

sudoedit bash.bashrc

add:  umask 0077

close & save 


# Method 4

sudo touch /etc/profile.d/umask.sh

sudoedit /etc/profile.d/umask.sh

sudo chmod +x /etc/profile.d/umask.sh

copy/paste below:

# Set a more restrictive umask
# This makes newly created files only readable by the owner
umask 0077                                                 

https://obscurix.github.io/security/other-security-features.html

# Method 5

perl -npe 's/umask\s+0\d2/umask 077/g' -i /etc/bash.bashrc

regardless which used always check after reboot to see if it's sticking by issuing: umask    command in terminal

*note be cautious and test if using 0077 (equivilant to 700) mask especially if you frequently share files may need to use 0027 (equivilant to 750) instead of 0077 if you start having issues
-------------------------------------------------------------------------------------------------------------------------------------------------
## set a root password and then lock root account if you like but if things go wrong and you need to login as root :(

sudo passwd root

(it'll prompt you to enter new password)

then lock root account if you like:

sudo passwd root -l 

to unlock: sudo passwd -u
-------------------------------------------------------------------------------------------------------------------------------------------------
## Set trim to run daily instead of weekly that is default 
https://easylinuxtipsproject.blogspot.com/p/ssd.html#ID6

#create a folder: 
sudo mkdir -v /etc/systemd/system/fstrim.timer.d

#create file in folder:
sudo touch /etc/systemd/system/fstrim.timer.d/override.conf

#edit new file
sudo nano /etc/systemd/system/fstrim.timer.d/override.conf

#copy and paste into file then close and save:

[Timer]
OnCalendar=
OnCalendar=daily


#reboot and now it will run daily to check it ran in the future just type:

journalctl | grep fstrim.service 
-------------------------------------------------------------------------------------------------------------------------------------------------
## At and Cron (use Yasat plugin for audit)
Only allow root and people with verified need to run cron jobs
Setup cron.allow and cron.deny
Setup equivalents if you have 'at' installed

##SSH (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/ssh/  
#Easy audit ssh with yasat: sudo yasat -p ssh.test
Enable only ssh2 protocol 
Install fail2ban
Do not allow root logins
Consider adding group permission for logins, AllowGroups wheel

##MYSQL (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/mysql/
#Audit with yasat: sudo yasat -p mysql.test
If database is used internally to machine, make it listen on localhost
 Change passwords

##Apache (use Yasat plugin for audit) https://bookofzeus.com/harden-ubuntu/hardening/apache/
#Audit with yasat: sudo yasat -p apache_conf.test
sudo yasat -p apache_modules.test
sudo yasat -p apache_vhosts.test
#Remove all unneeded modules
Use mod_security to weed out injection attacks
Set correct SE Linux Booleans to maintain functionality and
protection

##Iptables : https://bookofzeus.com/harden-ubuntu/hardening/setup-iptables/
#Audit with yasat: sudo yasat -p firewall.test

##Secure Postfix: https://bookofzeus.com/harden-ubuntu/software/secure-postfix/
#Audit with yasat: sudo yasat -p postfix.test

##NTP Network Time Protocol audit with yasat: sudo yasat -p ntp.test
-------------------------------------------------------------------------------------------------------------------------------------------------
pam_tally2
● This is used to lockout an account for consecutive failed login
attempts

pam_access
● Used to forbid logins from certain locations, consoles, and
accounts
● /etc/security/access.conf controls its config

pam_time
● Used to forbid logins during non-business hours
● /etc/security/time.conf controls its config

pam_limits
● Used to limit maximum concurrent sessions and other user restrictions
● /etc/security/limits.conf controls its config

pam_loginuid
● Used for all entry point daemons to set the task's loginuid and session
identifier
● Loginuid and session ID are inherited by all processes at fork
● Stored inside the task struct in the kernel
● Using require-auditd module option will forbid login if auditd is not running

Limit access to su command
● Edit /etc/pam.d/su
● Uncomment the line saying require wheel to allow uid change
auth required pam_wheel.so use_uid

dpkg-statoverride --update --add root adm 4750 /bin/su
-------------------------------------------------------------------------------------------------------------------------------------------------
## Computer has > 4 GB RAM speed things up with zram ~ https://easylinuxtipsproject.blogspot.com/p/speed-mint.html#ID1.2

sudoedit /etc/default/grub

#add: zswap.enabled=1 zswap.zpool=z3fold zswap.compressor=lz4   as shown below in Example:

#Example: 

GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1 zswap.zpool=z3fold zswap.compressor=lz4"


#Save the modified file and close: Ctrl X then press Y and last press Enter 

#Copy/paste then press Enter and update your new changes

sudo update-grub

#Copy/paste the following command line into the terminal:

sudoedit /etc/initramfs-tools/modules

Press Enter

At the bottom of the text of that file add: z3fold    so it looks like the below:

# List of modules that you want to include in your initramfs.
# They will be loaded at boot time in the order below.
#
# Syntax: module_name [args ...]
#
# You must run update-initramfs(8) to effect this change.
#
# Examples:
#
# raid1
# sd_mod
z3fold

#Save the changes(Ctrl X) press Y and lastly press Enter

#Copy/Paste below command then press Enter:

sudo update-initramfs -u


Reboot 

#See if it's working: 

dmesg | grep zswap

#It should report in its final line: zswap: loaded using pool lz4/z3fold.

#Percentage of your RAM that zswap uses, can be checked with the following command:

cat /sys/module/zswap/parameters/max_pool_percent

#It should report 20, which is the default, or 40 at the most.
-------------------------------------------------------------------------------------------------------------------------------------------------
## Install haveged and jitterentropy for better Entropy (random number generation) why? computers use a lot it and it's a bonus to have plenty of it especially with encryption https://hakk.gg/linux-hardening-guide/#entropy

sudo apt install haveged jitterentropy-rngd

sudo systemctl enable haveged

#Now to get jitterentropy acting right we need create a config file: 

sudo touch /usr/lib/modules-load.d/jitterentropy.conf

Next lets edit it: 

sudo nano /usr/lib/modules-load.d/jitterentropy.conf

copy/paste into file: jitterentropy_rng     

Then close Ctrl X and lastly save press Y then Enter:

Now reboot and they'll begin working creating randomness
-------------------------------------------------------------------------------------------------------------------------------------------------
## Kick any idle users off just for the sake of security in general after 10 minutes:

sudo touch /etc/profile.d/os-security.sh

sudo nano /etc/profile.d/os-security.sh

copy/paste below into file then close and save:

readonly TMOUT=600
readonly HISTFILE

Last make executable:

sudo chmod +x /etc/profile.d/os-security.sh


https://wiki.centos.org/HowTos/OS_Protection
-------------------------------------------------------------------------------------------------------------------------------------------------
## Lockdown Cron and At ~ so that only root and trusted users may be able to use and no others-this script will do this by creating a cron.allow & cron.deny file inside /etc directory ~

First create a bash script file named lockCron.sh      <--------- (use anything you like for name)  

sudo touch /etc/cronLock.sh

Now open for editing:

sudo nano /etc/cronLock.sh

And copy/paste below then close & save:
******************************************************************
#!/bin/sh
echo "Locking down Cron"
touch /etc/cron.allow
chmod 600 /etc/cron.allow
awk -F: '{print $1}' /etc/passwd | grep -v root > /etc/cron.deny
echo "Locking down AT"
touch /etc/at.allow
chmod 600 /etc/at.allow
awk -F: '{print $1}' /etc/passwd | grep -v root > /etc/at.deny
exit 0
******************************************************************
#Make it executable:

sudo chmod +x /etc/cronLock.sh

Now run the script: cd /etc

sudo ./cronLock.sh 

That's all :) should print in terminal "Locking down Cron" & "Locking down AT"          https://wiki.centos.org/HowTos/OS_Protection
-------------------------------------------------------------------------------------------------------------------------------------------------
## GRUB Password Protect

To set a password for GRUB issue in terminal:

grub-mkpasswd-pbkdf2

Enter your password and a string will be generated from that password. It will be like grub.pbkdf2.sha512.10000.... 

Edit /etc/grub.d/40_custom and add

set superusers="username"
password_pbkdf2 username (password)

Replace "(password)" with the string generated by "grub-mkpasswd-pbkdf2". 

The username you can just keep this as "root" 

Regenerate your configuration file with

grub-mkconfig /boot/grub/grub.cfg

GRUB will now be password protected.
-------------------------------------------------------------------------------------------------------------------------------------------------
## Use NTS Network Time Secure instead of regular insecure NTP 

*note NTS key exchange: Establishes the necessary key material between the NTP client and the server, using a Transport Layer Security (TLS) handshake

sudo apt install ntpsec

Once installed open config in /etc/ntpsec/ntp.conf:

sudoedit /etc/ntpsec/ntp.conf

Once open scroll down to:

# Public NTP servers supporting Network Time Security:
server time.cloudflare.com nts    <--------this one is listed be sure to remove the # to activate
server sth1.nts.netnod.se nts iburst
server sth2.nts.netnod.se nts iburst
server nts.ntp.se nts

Then you'll see a lot of pools listed just add a # in front of all of them :)

next at the top or near the top if you want logs you'll want to create a folder in /var/logs:

sudo touch /var/log/ntpsec/ 

then change the owner & group to ntpsec:

sudo chown ntpsec:ntpsec /var/log/ntpsec/


This is how my config looked near top in the config for logs: 

*****************************************************************************
# You must create /var/log/ntpsec (owned by ntpsec:ntpsec) to enable logging.
statsdir /var/log/ntpsec/
statistics loopstats peerstats clockstats
#filegen loopstats file loopstats type day enable
#filegen peerstats file peerstats type day enable
#filegen clockstats file clockstats type day enable


it says what we just did create a log owned by ntpsec remove the # in front of any of the 4 options you'd like logs for them save exit reboot

after rebooting check to see if errors occurred with: 

journalctl | grep ntpsec 

Then we'll see if our new network time secure peers are up and working type into terminal:

ntpq -p  <----- the t column is the cookie count and should read 8 if none have been lost - st column is stratum how close or far the clock is to an atomic clock (the main clock) - offset the difference between your time and the time that's retrieved - delay round trip time - jitter less is better 

ntpq -c nts

ntpq -c rv                 Visit: https://docs.ntpsec.org/latest/ntpq.html for the list of commands 

ntpq -c sysinfo

ntpq -c apeers

ntpq -c peers

Also we can use this command to check it's enabled - functioing: 

sudo systemctl status ntp

This will list the clients we have listed in the config if all is well :) 

Lastly be sure and turn off any other clocks such as timesyncd : sudo systemctl disable timesyncd.service

https://www.netnod.se/netnod-time/how-to-use-nts
https://www.ntpsec.org/
https://www.netnod.se/blog/what-network-time-security-and-why-it-important
https://datatracker.ietf.org/meeting/106/materials/slides-106-ntp-nts-deployment-03.pdf <------list port numbers and most NTS servers
-------------------------------------------------------------------------------------------------------------------------------------------------
## Set up a private - secure encrypted directory for whatever passwords ... logins 

sudo apt install encryptfs-utils

Next just make a new secure locked directory by typing: 

sudo ecryptfs-setup-private     

It'll prompt you for a password and then create a mount passphrase be sure not to forget :) Reboot then any files written in ~/Private (/home/Private) will be encrypted 

In case of emergency type: sudo encryptfs-recover-private      this will decrypt the data 
-------------------------------------------------------------------------------------------------------------------------------------------------
## logs:

First set up Journal to keep some persistant logs:  sudo mkdir -p /var/log/journal

Next add yourself to the admin account to view all logs: sudo usermod -a -G adm yourUserName

Then just reboot to take effect. Make use of grep and find any log: 

journalctl | grep errors

journalctl | grep critical

journalctl | grep warning

journalctl | grep failed

journalctl | grep debug

journalctl | grep info

To view logs since recent boot type: journalctl -b

To view only errors since boot type: journalctl -b -p err

To view in realtime (similair to tail) + the last 10 messages type: journalctl -f

sudo cat /var/log/kern.log | grep DENIED

logwatch –range All –archives –detail Med | more

sudo logwatch | less

logwatch –mailto [email protected] –range All 

sudo find /var/log/ -type f \( -name “*.log” \) -exec tail -f “$file” {} + | more

-------------------------------------------------------------------------------------------------------------------------------------------------
## Block all wireless devices (bluetooth wifi) with Rfkill at boot ~

sudo touch /opt/rfkill.sh && sudoedit /opt/rfkill.sh

Once it’s opened copy and paste:

#!/bin/sh
sleep 20
rfkill block all
exit 0


Then close using Ctrl+x Press Y then Press Enter

Lets make it executable: chmod +x /opt/rfkill.sh

Now we’ll create a Service that will execute it as root:

sudo touch /etc/systemd/system/rfkill.service

Now lets edit the Service:

sudoedit /etc/systemd/system/rfkill.service

Copy & Paste:

[Unit]
Description=Rfkill Service
After=network-online.target
Wants=network-online.target
[Service]
ExecStart=/opt/rfkill.sh
Type=oneshot

[Install]
WantedBy=multi-user.target

Close it with Ctrl+x Press Y then Press Enter then type:

sudo systemctl enable rfkill

That’s it. Just reboot and check it ran by typing into Terminal: systemctl status rfkill 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Change mac address at every boot service  https://theprivacyguide1.github.io/linux_hardening_guide#mac_address

sudo apt install macchanger 

sudo touch /etc/systemd/system/mac.service 

sudoedit /etc/systemd/system/mac.service

#Now copy & paste ~ 

[Unit]
Description=macchanger on eth0
Wants=network-pre.target
Before=network-pre.target
BindsTo=sys-subsystem-net-devices-eth0.device
After=sys-subsystem-net-devices-eth0.device

[Service]
ExecStart=/usr/bin/macchanger -e eth0
Type=oneshot

[Install]
WantedBy=multi-user.target


#press "Ctrl x" to close 

#click "Y" and then press Enter to save

Replace eth0 with your network interface. You can find the mac address with "ip a" command 

Then activate it: sudo systemctl enable mac

Macchanger prompts upon install to automatically change Mac (select No) this methid works better ...
-------------------------------------------------------------------------------------------------------------------------------------------------
## Browser Tips 

if you added firejail sandbox and then ran in terminal: sudo firecfg   then skip the following:

right click a browser icon then click properties and edit now add firejail to the beginning of its command 



firefox can make use of seccomp: firejail --seccomp firefox    thus limiting its access chromium can not use as it has its own however can still benefit from firejail: firejail chromium

to see if it's sandboxed just type: firejail --list and or for more detail: firejail --tree

reccomend adding:  noscript browser extension then in its setting select "Temporarily set top-level sites to TRUSTED" and "
Any capability blocked in the top document must be blocked in its subdocuments too" 

one more extension that is light and helpful is:  Ublock Origin    after installed adjust your filters list by clicking on their gears icon and you may want to add this filter to the list by selecting import at the bottom of the filter settings and pasting: 

https://github.com/notracking/hosts-blocklists/raw/master/adblock/adblock.txt

In chromium type in address bar: chrome://flags   then press enter

enable: Block scripts loaded via document.write

enable: Strict-Origin-Isolation

enable: Isolated Sandboxed Iframes

enable: Throttle non-visible cross-origin iframes

enable: Support for HTTPS records in DNS

enable: Throttle non-visible cross-origin iframes

enable: CSP policy for Web Payment API

There are many more options may have to tinker around until you get it how you like it :) 
-------------------------------------------------------------------------------------------------------------------------------------------------
## If not using rfkill to block all wireless or want to use another way of blocking wireless drivers then type as root:

sudo su

for i in $(find /lib/modules/`uname -r`/kernel/drivers/net/wireless -name "*.ko" -type f) ; do echo blacklist $i >> /etc/modprobe.d/blacklist-wireless ; done


That searches for wireless kernel drivers then adds them to a newly created blacklist in /etc/modprobe.d  Be sure to run command every kernel update as they can add new wireless drivers and or update existing 

-------------------------------------------------------------------------------------------------------------------------------------------------
## Secure postfix

first check for errors: sudo postconf 1> /dev/null

If errors are found they'll be returned to reconfigure type in terminal: sudo dpkg-reconfigure postfix

Many times the permissions maybe off to fix type in terminal: sudo chmod -R 755 /etc/postfix

Then secure the config files: sudo chmod 644 /etc/postfix/*.cf 

Lastly secure mail log: sudo chown root:root /var/log/mail*
sudo chmod 600 /var/log/mail*

Moving on disable vrfy: sudo postconf -e disable_vrfy_command=yes

Next only allow postfix to listen on loopback interface: sudo postconf -e inet_interfaces=loopback-only

Then check one of the three commands: netstat -tanp | grep LISTEN 
netstat -tulpn
ss -tulpn 

Can also scan with nmap:  nmap -v -sT localhost

Should see 25/tcp open on 127.0.0.1 (localhost only) 

Enable HELO: sudo postconf -e smtpd_helo_required=yes

Be sure and setup email addresses in aliases /etc/aliases for root especially then run in terminal: newaliases command

Verify postfix is not accepting connections from the outside by using another host(can't be the same computer) type: nmap -sT -p 25 REMOTE_HOST  or 
telnet <remote_host> 25

for more settings see: https://linux-audit.com/postfix-hardening-guide-for-security-and-privacy/ & https://bookofzeus.com/harden-ubuntu/software/secure-postfix/

-------------------------------------------------------------------------------------------------------------------------------------------------
## Secure configuration files or other files you'd not want changed using the "chattr" command. Chatter can make files Immutable in other words they can't be written to, can't be deleted or renamed, and no hard links can be created from them. Only symbolic links maybe created to them.

Example preventing new users: sudo chattr -V +i /etc/passwd

May want to do shadow gshadow sudoers there are many possibilities .profile .bashrc to name a few 

To remove the immutable attribute, you use the -i option and the -V option prints info for you to see the changes or else you wouldn't see anything at all 
-------------------------------------------------------------------------------------------------------------------------------------------------
## Check to see what mitigations are enabled and what's not being mitigated: 

grep -H '' /sys/devices/system/cpu/vulnerabilities/*
-------------------------------------------------------------------------------------------------------------------------------------------------
## Finding files with World Permissions:

find / -perm -o=w ! -type l -ls

fix with: sudo chmod o-w filePath or dirPath


# make sure all world writable directories have sticly bit set :

find PART -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print

(if found then add the sticky bit): chmod +t /dir


# Find logs that are world readable

find /var/log -perm -o=r ! -type l

fix readable files in /var/log: sudo chmod -R 640 /var/log/


# Find Unauthorized World-Writable Files

find / -xdev -type f -perm -0002 -print 

find / -path /proc -prune -o -perm -2 ! -type l -ls

if found fix by: chmod o-w filePath


# Find Unauthorized SUID/SGID System Executables

sudo find / -perm -2000 -ls   <---group

sudo find / -perm -4000 -ls   <---user

If found fix with: sudo chmod -s filePath


# Find and repair any Unowned (orphan) files

sudo find / -nouser -o -nogroup -ls

sudo find / -path /proc -prune -o -nouser -o -nogroup


# Verify that All World-Writable Directories Have Proper Ownership

find PART -xdev -type d -perm -0002 -uid +500 -print
-------------------------------------------------------------------------------------------------------------------------------------------------
## Software everyone has their own favorite but if you do not:

Email: Tutanota Email it's secure encrypted open source and has a free version with a hell of a good calendar that's not overly complicated - https://tutanota.com/

Browser: Chromium:  sudo apt install chromium     It's quick, pretty secure and also open source

Backup: Deja-dup why because it's simple to use and lets you backup more than just your /home folder plus restoring is just as simple in case of emergency 

Cloud Storage (backup): Filen: located here: https://filen.io/ It's secure (client-side encryption) private and easy to use on both mobile phones and your Linux desktop and or laptop plus comes with a free 10 GB 

Cleaner: stick with Stacer as it doesn't delete things that could cause issues like some others do

Password Manager: Bitwarden why because it's secure, free and open source store secure notes, passwords. credit cards ... 
-------------------------------------------------------------------------------------------------------------------------------------------------



