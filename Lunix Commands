Linux Command Notes:


## Compile a Kernel

# cd /usr/src/linux

# make mrproper <--------Clean everything, including config files

# make oldconfig   <----Reuse the old .config if existent

# make menuconfig <-----or xconfig (Qt) or gconfig (GTK)

# make <-------Create a compressed kernel image

# make modules <-----Compile the modules

# make modules_install <-----Install the modules

# make install <-------Install the kernel

# reboot
-------------------------------------------------------------------------------------------------------------------------------------------------------
## Common dpkg command usage and apt

sudo dpkg -i package.deb   (installs package)

sudo dpkg -c package.deb   (list package contents)

sudo dpkg -I package.deb   (extracts package info.)

sudo dpkg -r package   (removes an installed package named package)

sudo dpkg -P package   (purges an installed package named package)

*note: The difference between remove and purge is that while remove only deletes data and executables, purge also deletes all configuration files in addition

sudo dpkg -L package   (list all files insatlled by package)

sudo dpkg -s package   (shows info. on the installed package)

sudo dpkg-reconfigure package   (reconfigures an installed package)

sudo dpkg -S file   (searches for file in package database, telling you which installed packages have that file in them)

sudo dpkg --get-selections package   (get current status of package)

sudo dpkg --configure --pending   (try and fix depenencies error by configuring packages that have already been unpacked) after then try:
apt-get install -f    apt-get upgrade -f    apt-get dist-upgrade -f

*note:that apt-get install -f does not require a <package> argument 

apt-get install package or apt install package   (Downloads package and all of its dependencies, and installs or upgrades them)

apt-get remove [--purge] package   (Removes package and any packages that depend on it --purge specifies that packages should be purged)

apt-get update   (Updates packages listings from Debian mirrors, should be run at least once a day if you install anything that day, and every time after /etc/apt/sources.list is changed)

apt-get upgrade [-u] (Upgrades all packages installed to newest versions available. Will not install new or remove old packages -u to see what packages are to be upgraded)

apt-get dist-upgrade [-u]   (Similar to apt-get upgrade, except that dist-upgrade will install or remove packages to satisfy dependencies)

apt-cache search <pattern>   (Searches packages and descriptions for <pattern>.)

apt-cache show package   (Shows the full description of package)

apt-cache showpkg package   (Shows a lot more detail about <package>, and its relationships to other packages)


# Building Debian packages from Source

apt-get source [-b] <package>    (Download the source Debian package for <package> and extract it. You must have deb-src lines in your /etc/apt/sources.list for this to work. If you supply the `-b' option and you are currently root, then the package will be automatically built if possible)

apt-get build-dep <package>   (Download and install the packages necessary to build the source Debian package <package>. This feature is only present in apt version 0.5 and up. Currently this means that woody and above contain this functionality. If you have an older version of apt then the easiest way to find out the build dependencies is to look in the debian/control file in the source package directory) A common usage of this command is in conjunction with apt-get source -b. For example (as root):
                                                apt-get build-dep <package>
Will download the source package, all of its build dependencies, and attempt to compile the source package.                                                apt-get source -b <package>   

 credits- Matthew Danish
-------------------------------------------------------------------------------------------------------------------------------------------------------
## Check permissions of a file: ls -l filePath

## Check permissions of a directory: ls -ld directoryPath
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Postfix Mail sometimes needs to be reconfigured to work properly: sudo dpkg-reconfigure postfix

also its permissions need to be 755: sudo chmod -R 755 /etc/postfix 

then secure the config files: sudo chmod 644 /etc/postfix/*.cf 
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Compiling a .tar -

#extract the .tar

tar -xzf packageName

#check for any special features 

./configure --help

#install to a certain location

./configure --prefix=/home/username  (usually /usr/local is default)

#build the software

make

#test program see if compiled correctly

make check 

make test

#if you see a ./program it will run a series of tests and report whether it thinks that the
program will run correctly

#install program

make install

That's all :) test program ...
-------------------------------------------------------------------------------------------------------------------------------------------------------
## Service & Systemctl commands -

ACTION	                                      COMMAND
Check service status	                   sudo systemctl status <Service-Name>
Stop a service	                         sudo systemctl stop <Service-Name>
Disable a service	                      sudo systemctl disable <Service-Name>
Start a service	                        sudo systemctl start <Service-Name>
Enable a service	                       sudo systemctl enable <Service-Name>
Reload a service	                       sudo systemctl reload <Service-Name>
Restart a service	                      sudo systemctl restart <Service-Name>


ACTION	                                        COMMAND
Check service status	                   sudo service <Service-Name> status
Stop a service	                         sudo service <Service-Name> stop
Start a service	                        sudo service <Service-Name> start
Reload a service	                       sudo service <Service-Name> reload
Restart a service	                      sudo service <Service-Name> –full-restart


systemctl enable --now (service)        <----does not wait for reboot 

systemctl list-unit-files --type=service --state=enabled

systemctl list-unit-files --type=service --state=disabled

systemctl list-unit-files --type=service --state=enabled,disabled

systemctl list-units --type=service --state=running

systemctl list-units --type=service --state=failed  or simply type:  systemctl --failed

systemd-cgls
-------------------------------------------------------------------------------------------------------------------------------------------------------
## see what shared libraries a program uses and their location

ldd /pathOfProgram
 
#after installing shared libraries run this makes sure the system can find them:

sudo ldconfig
---------------------------------------------------------------------------------------------------------------------------------------------------------
## top command 

sort by memory and not default cpu:

Shift+M

press "?" to get a list of cmds 

press "f" for sorting the various fields 

press "u" then enter user name to list only processces for that user

sudo apt install nmon (you'll likely like it better) or btop 

---------------------------------------------------------------------------------------------------------------------------------------------------------
## Find & Delete files and or directories

*notes:

find

The find command used to search for files

. (Dot) 

The dot after the find command specifies that the operation must be done within the current directory

-type f

This option specifies what files we want to find. In case you want to search the directories, replace the f with a d

-name

This is the option to specify the file/directory target. This option must be typed before the file/directory name to define it

-delete 

This option instructs the find command to delete the found files

-exec 

Instructs to execute a posterior command after the first command (find) execution

rm -rf 

This command is used to force the removal of files and directories matching the given names

{} 

This is the find command placeholder, which means that it takes the file or directory names given to the find command to run the given command (After -exec)

\;

The back slash and the semicolon closes or finishes the –exec




# find files less than 5 megabytes & delete them 

sudo find /var/log -type f -size -5M -exec rm {} +


#find files larger than 1 gigabyte & delete

find /var/log -type f -size +1G -exec rm {} +


# remove all files of a certain extension

find <ParentDirectory> -type f -name '*.<Extension>' -print -delete

find <ParentDirectory> -type f -name '*.<Extension>' -exec rm -f {} \;

find <ParentDirectory> -name "*.<FileExtension>" -print0 | xargs -0 rm


# find and delete all files created and or modified in the past 24hrs 

find <Directory> -type f -mtime -1 -delete


# simply find a file or files and delete them by name

sudo find / -type f -name nameHere -exec rm {} \;

sudo find / -type f -name nameHere -print -delete


# find a directory & delete 

sudo find / -type d -name nameHere -print -delete


# find files ONLY in current directory & delete

find . -type f -name nameHere -delete


# find a directory & delete ONLY in the current directory

find . -type f -name "file*" -delete
---------------------------------------------------------------------------------------------------------------------------------------------------------
## redirect all DNS queries to 1.1.1.1

iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.1.1.1
iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1

Remove rules: iptables -t nat -D OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.1.1.1
iptables -t nat -D OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1

---------------------------------------------------------------------------------------------------------------------------------------------------------
Look for suspicious strings:

sudo chkrootkit -x | less

rkhunter --propupd     <------prepare rkhunter 

rkhunter --check --sk      <------scan computer searching for rootkits
---------------------------------------------------------------------------------------------------------------------------------------------------------
## use the "sed" command for ex. remove hello world from a file:

sed 's/hello/world/' input.txt > output.txt

or don't output the file and edit it in place using the "i" switch:

 sed -i 's/hello/world/' file.txt

# print only line 45: 

sed -n '45p' file.txt

---------------------------------------------------------------------------------------------------------------------------------------------------------
# Check your cpu see if vunerable to any exploits or are they being mitigated:

fgrep -r '' /sys/devices/system/cpu/vulnerabilities

grep -H '' /sys/devices/system/cpu/vulnerabilities/*
---------------------------------------------------------------------------------------------------------------------------------------------------------
# A few different ways to find out what's listening for incoming connections if anything:

netstat -tanp | grep LISTEN (works best with sudo as it provides more info.)

netstat -tulpn (listening ports)

ss -tulpn

nmap -v -sT localhost  (open port scan)

sudo nmap -v -sS localhost  (SYN scan)
---------------------------------------------------------------------------------------------------------------------------------------------------------
# make sure all world writable directories have sticly bit set:

find PART -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print

(if found then add the sticky bit): chmod +t /dir


# Find world readable log files:

find /var/log -perm -o=r ! -type l

fix readable files in /var/log: sudo chmod -R 640 /var/log/


# Find Unauthorized World-Writable Files

find / -xdev -type f -perm -0002 -print 

find / -path /proc -prune -o -perm -2 ! -type l -ls

if found fix by typing in terminal: sudo chmod o-w fileName


# Two ways to find Unauthorized SUID/SGID System Executables

find PART -xdev \( -perm -4000 -o -perm -2000 \) -type f -print

find / -xdev -user root \( -perm -4000 -o -perm -2000 \)

if found fix: chmod -s file


# Two ways to find Unowned orphan files 

find PART -xdev \( -nouser -o -nogroup \) -print

find / -path /proc -prune -o -nouser -o -nogroup


# Verify that All World-Writable Directories Have Proper Ownership

find PART -xdev -type d -perm -0002 -uid +500 -print


# Print to screen any files in users home that have changed in the past 10 minutes 

find /home/userName/ -cmin 10 -print (files changed in past 10 min) 


# List .tar packages that are larger than 100 megabytes 

find / -type f -name *.tar.gz -size +100M -exec ls -l {} \;


# Delete any tmp files older than 24hrs:

find /tmp -type f \( ! -user root \) -atime +1 -print -delete


-------------------------------------------------------------------------------------------------------------------------------------------------------
sudo fstrim -av   (performs a Trim on Disk)

rm -rfv ~/.cache/thumbnails  (deletes thumbmails)

-------------------------------------------------------------------------------------------------------------------------------------------------------
sudo ausearch -f PATH (example sudo ausearch -f /home/userName/Passwords) or sudo ausearch -f passwd

sudo service auditd rotate  <-----rotate audit logs

aureport -l -i -ts yesterday -te today

aureport --anomaly

If access violations stand out, review them with:
ausearch --key access --raw

aureport --file --summary

To review what executables are doing:
ausearch --key access --raw

aureport -x --summary
-------------------------------------------------------------------------------------------------------------------------------------------------------

To see active accounts, run:

cat /etc/passwd | egrep -v '\/false|\/nologin|\/shutdown|\/halt'

You can disable account using this command:

usermod -s /usr/sbin/nologin "username"       (without quotes)
-------------------------------------------------------------------------------------------------------------------------------------------------------


kill PID
killall -9 program_name

https://www.jaiminton.com/cheatsheet/DFIR/#linux-cheat-sheet

date
uname –a
hostname
cat /proc/version
lsmod

Account Information
cat /etc/shadow
cat /etc/sudoers
cat /etc/sudoers.d/*
cut -d: -f1 /etc/passwd
getent passwd | cut -d: -f1
compgen -u

Current user
whoami
who
id

Last logged on users
last
lastb
cat /var/log/auth.log

Initialisation Files
cat /etc/bash.bashrc
cat ~/.bash_profile 
cat ~/.bashrc 

Environment and Startup Programs
cat /etc/profile
ls /etc/profile.d/
cat /etc/profile.d/*

Scheduled Tasks
ls /etc/cron.*
ls /etc/cron.*/*
cat /etc/cron.*/*
cat /etc/crontab

SSH Keys and Authorised Users
cat /etc/ssh/sshd_config
Note: This specifies where the SSH daemon will look for keys. Generally this will be as below.
ls /home/*/.ssh/*
cat /home/*/.ssh/id_rsa.pub
cat /home/*/.ssh/authorized_keys

Sudoers File (who who can run commands as a different user)
cat /etc/sudoers

Configuration Information
ls /etc/*.d
cat /etc/*.d/*

Network Connections / Socket Stats
netstat -tanp | grep LISTEN <------use with sudo for more info.
netstat
netstat -apetul
netstat -plan
netstat -plant
ss
ss -l
ss -ta
ss -tp

IP Table Information
ls /etc/iptables
cat /etc/iptables/*.v4
cat /etc/iptables/*.v6
iptables -L

Network Configuration
ifconfig -a
ip a

Browser Plugin Information
ls -la ~/.mozilla/plugins
ls -la /usr/lib/mozilla/plugins
ls -la /usr/lib64/mozilla/plugins
ls -la ~/.config/google-chrome/Default/Extensions/

Kernel Modules and Extensions/
ls -la /lib/modules/*/kernel/*

Process Information
ps <simple	list	output	threads	misc	all>’
ps -s
ps -l
ps -o
ps -t
ps -m
ps -a
top

Process Tree
ps -auxwf

Detailed Process Information
ls -al /proc/[PID]

Process Command Line Information
cat /proc/[PID]/cmdline
cat /proc/[PID]/comm
Note:Significant differences in the above 2 outputs and the specified binary name under /proc/[PID]/exe can be indicative of malicious software attempting to remain undetected.

Process Environment Variables (incl user who ran binary)
strings /proc/[PID]/environ
cat /proc/[PID]/environ

Process file descriptors/maps (what the process is ‘accessing’ or using)
ls -al /proc/[PID]/fd
cat /proc/[PID]/maps

Process stack/status information (may reveal useful elements)
cat /proc/[PID]/stack
cat /proc/[PID]/status

Deleted binaries which are still running
ls -alr /proc/*/exe 2> /dev/null |  grep deleted

Process Working Directories (including common targeted directories)
ls -alr /proc/*/cwd
ls -alr /proc/*/cwd 2> /dev/null | grep tmp
ls -alr /proc/*/cwd 2> /dev/null | grep dev
ls -alr /proc/*/cwd 2> /dev/null | grep var
ls -alr /proc/*/cwd 2> /dev/null | grep home

Search files recursively in directory for keyword
grep -H -i -r "password" /

Open Files and space usage
lsof
du

Pluggable Authentication Modules (PAM)
cat /etc/pam.d/sudo
cat /etc/pam.conf
ls /etc/pam.d/

Disk / Partition Information
sudo fdisk -l

System Calls / Network Traffic
strace -f -e trace=network -s 10000 <PROCESS WITH ARGUMENTS>;
strace -f -e trace=network -s 10000 -p <PID>;

CWD = Current Working Directory of Malware
EXE = Binary location and whether it has been deleted
Most Common Timestamp = When process was created
Recover deleted binary which is currently running

cp /proc/[PID]/exe /[destination]/[binaryname]
Capture Binary Data for Review
cp /proc/[PID]/ /[destination]/[PID]/

Binary hash information
sha1sum /[destination]/[binaryname]
md5sum /[destination]/[binaryname]

Immutable Files and Directories (Often Suspicious)
lsattr / -R 2> /dev/null | grep "\----i"

SUID/SGID and Sticky Bit Special Permissions
find / -type f \( -perm -04000 -o -perm -02000 \) -exec ls -lg {} \;

File and Directories with no user/group name
find / \( -nouser -o -nogroup \) -exec ls -lg  {} \;

File types in current directory
file * -p

Executables on file system
find / -type f -exec file -p '{}' \; |  grep ELF

Hidden Executables on file system
find / -name ".*" -exec file -p '{}' \; | grep ELF

Files modified within the past day
find / -mtime -1

Persistent Areas of Interest
/etc/rc.local
/etc/initd
/etc/rc*.d
/etc/modules
/etc/cron*
/var/spool/cron/*
/usr/lib/cron/
/usr/lib/cron/tabs

Audit Logs
ls -al /var/log/*
ls -al /var/log/*tmp
utmpdump /var/log/btmp
utmpdump /var/run/utmp
utmpdump /var/log/wtmp

Installed Software Packages
ls /usr/bin/
ls /usr/local/bin/

history | tail -50

sudo iptables -L -n -v

lsof -i

df

mount | column -t

fuser -va /home

ps -ef|grep boot

sysctl -a

who

tail -n 500 /var/log/messages

iostat 2

vmstat 2

mpstat 1

sysctl dev

sysctl -a | grep mem

sysctl vm

free -m

cat /proc/cpuinfo

cat /proc/meminfo

ss -tup

netstat -plant

sudo apt update && apt upgrade -y && apt dist-upgrade -y && reboot

grep MemTotal /proc/meminfo

ip a
---------------------------------------------------------------------------------------------------------------------------------------------------------
sudo aa-status (apparmor info)

ps auxZ | grep -v '^unconfined'

sudo grub-mkconfig -o /boot/grub/grub.cfg   (install microcode for amd-intel)

ps -aux

• lsmod – Displays a list of all loaded modules

• modinfo <module name> - Displays information about a specific module

• rmmod <module name> – Will try to unload a module (if not used)

lsof -i +M

netstat -at

cat /etc/crontab
ls /etc/cron.*
crontab –u root –l
-------------------------------------------------------------------------------------------------------------------------------------------------------
# check mitigations are enabled or not 

fgrep -r '' /sys/devices/system/cpu/vulnerabilities

grep -H '' /sys/devices/system/cpu/vulnerabilities/*

# make sure all world writable directories have sticly bit set :
find PART -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
(if found then add the sticky bit): chmod +t /dir
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Import GPG key ~

If you have their key saved to a file - in this case we have our friend James's keyblock saved as james.asc:

$ gpg --import james.asc 
  gpg: key 0xBDC6C9E273F65634: public key "Jane Doe <jamesdoe@nunya.biz>" imported
  gpg: Total number processed: 1
  gpg:               imported: 1
  
  
If you just copied their public keyblock and want to paste it:

$ gpg --import [press 'Enter']
  [Paste the keyblock and press 'Enter' again]
  [Press Ctrl+D]

Easy Peasy 
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Steps to take if a User leaves or you want to remove the User ~

#Locating all files and or directories of a User and deleting:

 find .-user henry -type f -exec rm -f {} \;
 find .-user henry -type d -exec rmdir {} \;

#Expire the account, effectively locking the password:

 chage -E /01/01/22 henry

#The incoming mail can be redirected to another user:

su - henry -c "mail -F bigboss"

# Finally Delete the useraccount:

userdel -r henry
---------------------------------------------------------------------------------------------------------------------------------------------------------
## Journal logs

first add yourself to the adm group like so:  sudo usermod -a -G adm yourUserName 

can also type: sudo adduser yourUsername adm

afterwards set up a folder to begin acuumulating persistant logs: sudo mkdir -p /var/log/journal

to see logs since most recent boot: journalctl -b

to view logs in realtime + its last 10 messages type: journalctl -f

then there is a command that will show only errors since boot: journalctl -b -p err

any others just use grep Example: journalctl | grep Warning

journalctl | grep info
---------------------------------------------------------------------------------------------------------------------------------------------------------
# Secure configuration files or other files you'd not want changed using the "chattr" command. Chatter can make files Immutable in other words they can't be written to, can't be deleted or renamed, and no hard links can be created from them. Only symbolic links maybe created to them.

Example preventing new users: sudo chattr -V +i /etc/passwd 

To remove the immutable attribute, you use the -i option and the -V option prints info for you to see the changes or else you wouldn't see anything at all 
---------------------------------------------------------------------------------------------------------------------------------------------------------



